/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    tapping-term-ms = <300>;
    flavor = "tap-preferred";
};

&sk { release-after-ms = <2500>; };

&soft_off { hold-time-ms = <1000>; };

/ {
    combos {
        compatible = "zmk,combos";

        tilde_combo {
            bindings = <&kp TILDE>;
            key-positions = <15 16>;
        };

        single_quotation_combo {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <19 20>;
        };

        format_vs_code {
            bindings = <&vscode_format_code>;
            key-positions = <14 15 16>;
        };

        sticky_shift_left {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <14 15>;
        };

        sticky_key_right {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <20 21>;
        };
    };

    macros {
        vscode_format_code: vscode_format_code {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT &kp LSHIFT>,
                <&macro_tap>,
                <&kp F>,
                <&macro_release>,
                <&kp LSHFT &kp LALT>;

            label = "VSCODE_FORMAT_CODE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB     &kp Q  &kp W  &kp E      &kp R  &kp T        &kp Y          &kp U         &kp I       &kp O    &kp P          &kp GRAVE
&kp ESCAPE  &kp A  &kp S  &kp D      &kp F  &kp G        &kp H          &kp J         &kp K       &kp L    &kp SEMICOLON  &kp SQT
&lt 3 LGUI  &kp Z  &kp X  &kp C      &kp V  &kp B        &kp N          &kp M         &kp COMMA   &kp DOT  &kp FSLH       &kp ENTER
                          &sk LCTRL  &mo 1  &kp SPACE    &kp BACKSPACE  &lt 2 DELETE  &kp LSHIFT
            >;
        };

        SYM {
            bindings = <
&none   &kp N1     &kp N2     &kp N3     &kp N4     &kp N5           &kp N6     &kp N7     &kp N8    &kp N9    &kp N0    &trans
&trans  &trans     &trans     &trans     &trans     &kp PIPE         &kp MINUS  &kp EQUAL  &kp PLUS  &kp LBKT  &kp RBKT  &trans
&trans  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp BACKSLASH    &trans     &kp UNDER  &trans    &trans    &trans    &trans
                              &trans     &trans     &kp LSHFT        &trans     &trans     &trans
            >;
        };

        FUN {
            bindings = <
&trans  &kp F1    &kp F2    &kp F3     &kp F4     &kp F5    &kp F6  &kp F7    &kp F8        &kp F9          &kp F10    &kp F11
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans    &trans  &kp LEFT  &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT  &kp F12
&trans  &trans    &trans    &trans     &trans     &trans    &trans  &kp HOME  &trans        &trans          &kp END    &trans
                            &trans     &trans     &trans    &trans  &trans    &trans
            >;
        };

        MEDIA {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3    &bt BT_SEL 4         &trans    &trans    &trans          &trans           &out OUT_TOG       &trans      &trans
&trans        &trans        &trans        &trans          &vscode_format_code  &trans    &trans    &kp C_PREVIOUS  &kp C_VOLUME_UP  &kp C_VOLUME_DOWN  &kp C_NEXT  &trans
&trans        &trans        &trans        &bt BT_CLR_ALL  &trans               &trans    &kp C_PP  &trans          &trans           &trans             &trans      &trans
                                          &trans          &trans               &trans    &trans    &trans          &trans
            >;
        };
    };
};
