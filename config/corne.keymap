/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    flavor = "tap-preferred";
    require-prior-idle-ms = <125>;
};

&soft_off { hold-time-ms = <1000>; };

&lt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <125>;
};

/ {
    combos {
        compatible = "zmk,combos";

        undo_combo {
            bindings = <&kp LC(Z)>;
            key-positions = <25 26>;
        };

        copy_combo {
            bindings = <&kp LC(C)>;
            key-positions = <26 27>;
        };

        paste_combo {
            bindings = <&kp LC(V)>;
            key-positions = <27 28>;
        };

        tab_combo {
            bindings = <&kp TAB>;
            key-positions = <16 15>;
        };

        caps_word_combo {
            bindings = <&caps_word>;
            key-positions = <37 40>;
        };

        caps_combo {
            bindings = <&kp CAPSLOCK>;
            key-positions = <16 19>;
        };
    };

    macros {
        vscode_format_code: vscode_format_code {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT &kp LSHIFT>,
                <&macro_tap>,
                <&kp F>,
                <&macro_release>,
                <&kp LSHFT &kp LALT>;

            label = "VSCODE_FORMAT_CODE";
        };

        cedilla: cedilla {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp SINGLE_QUOTE>, <&macro_tap>, <&kp C>;

            label = "CEDILLA";
        };

        tilde_a: tilde_a {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp TILDE>, <&macro_tap>, <&kp A>;

            label = "TILDE_A";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE      &kp Q  &kp W  &kp E      &kp R  &kp T          &kp Y          &kp U  &kp I           &kp O    &kp P          &kp DELETE
&mo 1           &kp A  &kp S  &kp D      &kp F  &kp G          &kp H          &kp J  &kp K           &kp L    &kp SEMICOLON  &kp SINGLE_QUOTE
&sk LEFT_SHIFT  &kp Z  &kp X  &kp C      &kp V  &kp B          &kp N          &kp M  &kp COMMA       &kp DOT  &kp FSLH       &kp ENTER
                              &kp LCTRL  &mo 2  &lt 4 SPACE    &kp BACKSPACE  &mo 3  &kp LEFT_SHIFT
            >;
        };

        MEDIA {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3    &bt BT_SEL 4         &kp LC(GRAVE)    &none     &none           &none            &none              &out OUT_BLE  &out OUT_USB
&none         &none         &none         &none           &vscode_format_code  &none            &none     &kp C_PREVIOUS  &kp C_VOLUME_UP  &kp C_VOLUME_DOWN  &kp C_NEXT    &none
&none         &none         &none         &bt BT_CLR_ALL  &none                &none            &kp C_PP  &none           &none            &none              &none         &none
                                          &none           &none                &none            &none     &none           &none
            >;
        };

        SYMBOLS {
            bindings = <
&trans  &kp LS(N1)  &kp LS(N2)  &kp LS(N3)     &kp LS(N4)  &kp LS(N5)    &kp QUESTION  &kp EQUAL   &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES  &kp LS(EQUAL)  &none
&trans  &tilde_a    &kp GRAVE   &kp BACKSLASH  &kp PIPE    &kp LS(N6)    &kp LS(N8)    &kp LS(N9)  &kp LS(LBKT)      &kp LBKT           &kp MINUS      &none
&none   &none       &none       &cedilla       &kp COLON   &kp LS(N7)    &kp TILDE     &kp LS(N0)  &kp LS(RBKT)      &kp RBKT           &kp LS(MINUS)  &trans
                                &none          &trans      &trans        &trans        &trans      &trans
            >;

            label = "SYM";
        };

        NAVIGATION {
            bindings = <
&trans  &kp F1     &kp F2     &kp F3     &kp F4     &kp F5       &kp F6  &kp F7          &kp F8        &kp F9         &kp F10    &kp F11
&trans  &kp LGUI   &kp LALT   &sk LCTRL  &sk LSHFT  &kp LG(G)    &none   &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN       &kp RIGHT  &kp F12
&none   &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &none        &none   &kp HOME        &kp PAGE_UP   &kp PAGE_DOWN  &kp END    &trans
                              &none      &kp LSHFT  &trans       &trans  &none           &none
            >;

            label = "NAV";
        };

        NUMBERS {
            bindings = <
&none   &none      &none      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &none     &none       &kp N7  &kp N8  &kp N9  &kp LS(EQUAL)  &tog 4
&trans  &kp LGUI   &kp LALT   &sk LCTRL             &sk LSHFT              &none     &kp LS(N8)  &kp N4  &kp N5  &kp N6  &kp MINUS      &none
&none   &kp LC(Z)  &kp LC(X)  &kp LC(C)             &kp LC(V)              &none     &kp DOT     &kp N1  &kp N2  &kp N3  &kp FSLH       &trans
                              &none                 &none                  &trans    &trans      &kp N0  &none
            >;

            label = "NUM";
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
