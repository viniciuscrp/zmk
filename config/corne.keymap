/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    tapping-term-ms = <300>;
    flavor = "tap-preferred";
};

&sk { release-after-ms = <2500>; };

&soft_off { hold-time-ms = <1000>; };

/ {
    combos {
        compatible = "zmk,combos";

        tilde_combo {
            bindings = <&kp TILDE>;
            key-positions = <15 16>;
        };

        single_quotation_combo {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <19 20>;
        };

        navigate_to_reference {
            bindings = <&kp F12>;
            key-positions = <14 15>;
        };

        navigate_to_implementation {
            bindings = <&kp LC(RS(F12))>;
            key-positions = <27 26>;
        };

        next_debug_line {
            bindings = <&kp F10>;
            key-positions = <2 3>;
        };

        enter_debug_function {
            bindings = <&kp F11>;
            key-positions = <3 4>;
        };

        format_vs_code {
            bindings = <&vscode_format_code>;
            key-positions = <14 15 16>;
        };
    };

    macros {
        vscode_format_code: vscode_format_code {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT &kp LSHIFT>,
                <&macro_tap>,
                <&kp F>,
                <&macro_release>,
                <&kp LSHFT &kp LALT>;

            label = "VSCODE_FORMAT_CODE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE   &kp Q  &kp W  &kp E           &kp R      &kp T        &kp Y          &kp U         &kp I      &kp O    &kp P          &kp GRAVE
&caps_word   &kp A  &kp S  &lt 4 D         &lt 3 F    &kp G        &kp H          &kp J         &kp K      &kp L    &kp SEMICOLON  &kp SQT
&key_repeat  &kp Z  &kp X  &kp C           &kp V      &kp B        &kp N          &kp M         &kp COMMA  &kp DOT  &kp FSLH       &kp ENTER
                           &sk LEFT_SHIFT  &lt 1 TAB  &kp SPACE    &kp BACKSPACE  &lt 2 DELETE  &mo 5
            >;
        };

        SYMBOLS {
            bindings = <
&none      &none      &kp LESS_THAN         &kp DOLLAR         &kp GREATER_THAN       &none       &none        &kp LEFT_BRACKET  &kp UNDER  &kp RIGHT_BRACKET  &none     &none
&kp MINUS  &kp SLASH  &kp LEFT_PARENTHESIS  &kp DOUBLE_QUOTES  &kp RIGHT_PARENTHESIS  &kp HASH    &kp PERCENT  &kp LEFT_BRACE    &kp EQUAL  &kp RIGHT_BRACE    &kp PIPE  &kp SEMI
&none      &none      &kp COLON             &kp STAR           &kp PLUS               &none       &none        &kp AMPS          &kp CARET  &kp TILDE          &none     &none
                                            &none              &none                  &none       &none        &none             &none
            >;

            label = "SYM";
        };

        FUNCTION {
            bindings = <
&none  &none     &none     &none      &none      &none    &none  &kp F7  &kp F8  &kp F9  &kp F10  &none
&none  &kp RGUI  &kp LALT  &sk LCTRL  &sk LSHFT  &none    &none  &kp F4  &kp F5  &kp F6  &kp F11  &none
&none  &none     &none     &none      &none      &none    &none  &kp F1  &kp F2  &kp F3  &kp F12  &none
                           &none      &none      &none    &none  &none   &none
            >;

            label = "FUN";
        };

        NAVIGATION {
            bindings = <
&none  &none         &none     &none           &none   &none        &none   &none           &none         &none     &none      &none
&none  &kp LEFT_GUI  &kp LALT  &kp LEFT_SHIFT  &none   &none        &none   &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN  &kp RIGHT  &none
&none  &none         &none     &none           &none   &none        &none   &kp HOME        &none         &none     &kp END    &none
                               &none           &trans  &kp LCTRL    &trans  &trans          &none
            >;

            label = "NAV";
        };

        NUMBER {
            bindings = <
&none  &none     &none      &none      &none      &none      &none         &kp N7        &kp NUMBER_8  &kp NUMBER_9  &none         &none
&none  &kp STAR  &kp MINUS  &none      &kp PLUS   &none      &kp NUMBER_0  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp NUMBER_0  &none
&none  &none     &none      &kp SLASH  &none      &none      &none         &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &none         &none
                            &none      &kp EQUAL  &kp DOT    &trans        &trans        &none
            >;

            label = "NUM";
        };

        MEDIA {
            bindings = <
&bt BT_CLR_ALL  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &none         &bootloader     &none             &none           &none            &none              &none       &none
&none           &none         &none         &none         &none         &none           &none             &kp C_PREVIOUS  &kp C_VOLUME_UP  &kp C_VOLUME_DOWN  &kp C_NEXT  &none
&none           &none         &none         &none         &out OUT_USB  &out OUT_BLE    &kp C_PLAY_PAUSE  &none           &none            &none              &none       &soft_off
                                            &none         &none         &none           &none             &none           &none
            >;

            label = "MED";
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
